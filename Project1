import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
from matplotlib.collections import LineCollection


def read_coordinate_file(filename):
    with open(filename, mode='r') as file:
        coord_list = []
        for line in file:
            [a, b] = line.strip("{} \n").split(sep=',')
            a = float(a)
            b = float(b)
            x = np.pi * b / 180
            y = np.log(np.tan((np.pi / 4) + (np.pi * a) / 360))
            coord_list.append([x, y])
    return np.array(coord_list, dtype=float)


def plot_points(coord_list, indicies, path):
    lines = []
    for i in range(0, len(indicies[0])):
        lines.append([coord_list[indicies[0, i]], coord_list[indicies[1, i]]])
    lc = LineCollection(lines, colors=['gray'], linewidths=0.5)

    pathline = []
    for i in range(0, len(path) - 1):
        pathline.append([coord_list[path[i]], coord_list[path[i + 1]]])
    plc = LineCollection(pathline, colors=['dodgerblue'], linewidths=1.5)

    fig = plt.figure()
    ax = fig.add_subplot(1, 1, 1)
    for line in coord_list:
        ax.plot(*line, 'ro', markersize=3)
    ax.add_collection(lc)
    ax.add_collection(plc)
    ax.set_aspect('equal')

    plt.show()


def construct_graph_connections(coord_list, radius):
    distance = []
    indicies = [[], []]
    for i in range(0, len(coord_list) - 1):
        [x1, y1] = coord_list[i]
        for j in range(i + 1, len(coord_list)):
            [x2, y2] = coord_list[j]
            dis = np.sqrt(abs(x2 - x1) ** 2 + abs(y2 - y1) ** 2)
            if dis <= radius:
                distance.append(dis)
                indicies[0].append(i)
                indicies[1].append(j)
    return np.array(distance, dtype=float), np.array(indicies)


def construct_graph(indicies, distance, N):
    graph = sp.sparse.csr_matrix((distance, indicies), shape=(N, N))
    return graph


def find_shortest_path(graph, start_node, end_node):
    i = end_node
    path = [end_node]
    while i != start_node:
        D, predecessor = sp.sparse.csgraph.shortest_path(graph, directed=False, return_predecessors=True,
                                                         indices=[start_node, end_node])
        i = predecessor[0, i]
        path.insert(0, i)

    return D[0, end_node], path


coord_list = (read_coordinate_file('GermanyCities.txt'))
print(coord_list)
print(len(coord_list))

radius = 0.0025
distance, indicies = construct_graph_connections(coord_list, radius)
print(indicies)
print(distance)

N = len(coord_list)
graph = construct_graph(indicies, distance, N)
print(graph)

start_node = 31
end_node = 2
D, path = find_shortest_path(graph, start_node, end_node)
print(path)
print(D)

plot_points(coord_list, indicies, path)
